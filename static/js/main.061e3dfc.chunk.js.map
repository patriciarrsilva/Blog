{"version":3,"sources":["Post.js","Home.js","About.js","ListComments.js","CreateComment.js","Comments.js","FullPostPage.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","postId","postTitle","postBody","className","to","Home","state","pages","posts","this","map","post","i","key","id","title","body","page","Component","About","src","alt","ListComments","comments","onDeleteComment","comment","onClick","CreateComment","query","updateQuery","handleSubmit","onSubmit","type","placeholder","value","onChange","e","target","Comments","removeComment","setState","filter","c","trim","preventDefault","length","commentsCopy","concat","push","FullPostPage","App","postsToSkip","fetch","then","response","json","data","path","render","match","params","exact","routeProps","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.061e3dfc.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nfunction Post(props) {\n    const { postId, postTitle, postBody } = props\n\n    return (\n        <article className=\"post\">\n            <h2 className=\"title\">\n                <Link to={`/post/${postId}`}>{postTitle}</Link>\n            </h2>\n            <p className=\"post-body\">{postBody}</p>\n        </article>\n    )\n}\n\nPost.propTypes = {\n    postId: PropTypes.number.isRequired,\n    postTitle: PropTypes.string.isRequired,\n    postBody: PropTypes.string.isRequired\n}\n\nexport default Post","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport Post from './Post'\n\nclass Home extends Component {\n    static propTypes = {\n        posts: PropTypes.array.isRequired\n    }\n\n    state = {\n        pages: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    }\n\n    render() {\n        const { posts } = this.props\n        const { pages } = this.state\n\n        //this.props.postsToSkip = this.props.routeProps.params.page * 10;\n\n        return (\n            <div className=\"home\">\n                <h1 className=\"title title-blog\">Blog</h1>\n                {posts.map((post, i) => <Post key={i} postId={post.id} postTitle={post.title} postBody={post.body} />)}\n                <ol>\n                    {pages.map((page, i) =>\n                        <li key={i}><Link to={`/${page}`}>{page + 1}</Link></li>\n                    )}\n                </ol>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React from 'react';\n\nfunction About() {\n    return (\n        <aside className=\"about center\">\n            <h2 className=\"title\">About Me</h2>\n            <img className=\"image\" src=\"http://www.frontieranimalsociety.com/images/News__Events/11ec71f4b5adce762099c3c0e7d5489b.png\" alt=\"profile\"></img>\n            <p className=\"about-body\">Something about me...</p>\n        </aside>\n    )\n}\n\nexport default About","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ListComments(props) {\n    const { comments, onDeleteComment } = props\n\n    return (\n        <ol className='comment-list' >\n            {comments.map((comment, i) => (\n                <li key={i} className='comment-list-item'>\n                    <div className='comment-details'>\n                        <p>{comment}</p>\n                    </div>\n                    <button onClick={() => onDeleteComment(comment)} className='comment-remove'>\n                        Remove\n                    </button>\n                </li>\n            ))\n            }\n        </ol>\n    )\n}\n\nListComments.propTypes = {\n    comments: PropTypes.array.isRequired,\n    onDeleteComment: PropTypes.func.isRequired\n}\n\nexport default ListComments","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction CreateComment(props) {\n    const { query, updateQuery, handleSubmit } = props\n\n    return (\n        <form onSubmit={handleSubmit} className='create-comment-form'>\n            <div className='create-comment-details'>\n                <input\n                    type='text'\n                    placeholder='Comment'\n                    value={query}\n                    onChange={e => updateQuery(e.target.value)}\n                ></input>\n                <button>Add Comment</button>\n            </div>\n        </form>\n    )\n}\n\nCreateComment.propTypes = {\n    query: PropTypes.string.isRequired,\n    updateQuery: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n}\n\nexport default CreateComment","import React, { Component } from 'react'\nimport ListComments from './ListComments';\nimport CreateComment from './CreateComment';\n\nclass Comments extends Component {\n    state = {\n        query: '',\n        comments: [\"Comment0\", \"Comment1\", \"Comment2\"]\n    }\n\n    removeComment = (comment) => {\n        this.setState(state => ({\n            comments: state.comments.filter(c => c !== comment)\n        }))\n    }\n\n    updateQuery = (query) => {\n        this.setState({ query: query.trim() })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.query.length) {\n            const commentsCopy = [].concat(this.state.comments);\n            commentsCopy.push(this.state.query);\n            this.setState({ comments: commentsCopy });\n            this.setState({ query: '' });\n        }\n    }\n\n    render() {\n        const { comments, query } = this.state\n\n        return (\n            <section>\n                <h2 className=\"title title-comments\">Comments</h2>\n                <ListComments comments={comments} onDeleteComment={this.removeComment} />\n                <CreateComment query={query} updateQuery={this.updateQuery} handleSubmit={this.handleSubmit} />\n            </section>\n        )\n    }\n}\n\nexport default Comments","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Post from './Post'\nimport About from './About'\nimport Comments from './Comments'\n\nfunction FullPostPage(props){\n    return (\n        <div>\n            <Link className=\"close-post\" to=\"/\">Close</Link>\n            <div className=\"flex-container\">\n                <Post postId={props.post.id} postTitle={props.post.title} postBody={props.post.body} />\n                <About />\n            </div>\n            <Comments />\n        </div>\n    );\n}\n\nexport default FullPostPage","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport Home from './Home'\nimport FullPostPage from './FullPostPage'\n\nclass App extends Component {\n  state = {\n    posts: [],\n    postsToSkip: 0,\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(response => response.json())\n      .then(data => this.setState({ posts: data }))\n  }\n\n  /* componentDidUpdate(prevProps, prevState, snapshot) {\n       const postsCopy = [].concat(this.state.posts);\n       postsCopy.slice(0 + this.state.postsToSkip, 10 + this.state.postsToSkip);\n       this.setState({ posts: postsCopy });\n     } */\n\n  render() {\n    const { posts, postsToSkip } = this.state;\n\n    return (\n      <div className='App'>\n        <Route path=\"/post/:id\" render={({ match }) => (\n          <FullPostPage\n            post={posts[(match.params.id - 1)]}\n          />\n        )} />\n        <Route exact path=\"/:page?\" render={({ match }) => (\n          <Home\n            posts={posts}\n            postsToSkip={postsToSkip}\n            routeProps={match}\n          />\n        )} />\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <BrowserRouter\n        basename='/Blog'\n    >\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}