{"version":3,"sources":["Post.js","Home.js","About.js","ListComments.js","CreateComment.js","Comments.js","FullPostPage.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","postId","postTitle","postBody","className","to","Home","state","pages","posts","this","map","post","i","key","id","title","body","page","Component","About","src","alt","ListComments","comments","onDeleteComment","comment","onClick","CreateComment","query","updateQuery","handleSubmit","onSubmit","type","placeholder","value","onChange","e","target","Comments","removeComment","setState","filter","c","trim","preventDefault","length","commentsCopy","concat","push","FullPostPage","App","fetch","then","response","json","data","path","render","postsId","match","params","exact","postsToRender","undefined","slice","postsToSkip","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36ffa0b2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Post(props) {\r\n    const { postId, postTitle, postBody } = props\r\n\r\n    return (\r\n        <article className=\"post\">\r\n            <h2 className=\"title\">\r\n                <Link to={`/post/${postId}`}>{postTitle}</Link>\r\n            </h2>\r\n            <p className=\"post-body\">{postBody}</p>\r\n        </article>\r\n    )\r\n}\r\n\r\nPost.propTypes = {\r\n    postId: PropTypes.number.isRequired,\r\n    postTitle: PropTypes.string.isRequired,\r\n    postBody: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Post","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport Post from './Post'\r\n\r\nclass Home extends Component {\r\n    static propTypes = {\r\n        posts: PropTypes.array.isRequired\r\n    }\r\n\r\n    state = {\r\n        pages: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    }\r\n\r\n    render() {\r\n        const { posts } = this.props\r\n        const { pages } = this.state\r\n\r\n        return (\r\n            <div className=\"home\">\r\n                <h1 className=\"title title-blog\">Blog</h1>\r\n                {posts.map((post, i) => <Post key={i} postId={post.id} postTitle={post.title} postBody={post.body} />)}\r\n                <ol className=\"page-list\">\r\n                    {pages.map((page, i) =>\r\n                        <li key={i} className=\"page-number\"><Link to={`/${page}`}>{page + 1}</Link></li>\r\n                    )}\r\n                </ol>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\r\n\r\nfunction About() {\r\n    return (\r\n        <aside className=\"about center\">\r\n            <h2 className=\"title\">About Me</h2>\r\n            <img className=\"image\" src=\"http://www.frontieranimalsociety.com/images/News__Events/11ec71f4b5adce762099c3c0e7d5489b.png\" alt=\"profile\"></img>\r\n            <p className=\"about-body\">Something about me...</p>\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction ListComments(props) {\r\n    const { comments, onDeleteComment } = props\r\n\r\n    return (\r\n        <ol className='comment-list' >\r\n            {comments.map((comment, i) => (\r\n                <li key={i} className='comment-list-item'>\r\n                    <div className='comment-details'>\r\n                        <p>{comment}</p>\r\n                    </div>\r\n                    <button onClick={() => onDeleteComment(comment)} className='comment-remove'>\r\n                        Remove\r\n                    </button>\r\n                </li>\r\n            ))\r\n            }\r\n        </ol>\r\n    )\r\n}\r\n\r\nListComments.propTypes = {\r\n    comments: PropTypes.array.isRequired,\r\n    onDeleteComment: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ListComments","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction CreateComment(props) {\r\n    const { query, updateQuery, handleSubmit } = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className='create-comment-form'>\r\n            <div className='create-comment-details'>\r\n                <input\r\n                    type='text'\r\n                    placeholder='Comment'\r\n                    value={query}\r\n                    onChange={e => updateQuery(e.target.value)}\r\n                ></input>\r\n                <button>Add Comment</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nCreateComment.propTypes = {\r\n    query: PropTypes.string.isRequired,\r\n    updateQuery: PropTypes.func.isRequired,\r\n    handleSubmit: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CreateComment","import React, { Component } from 'react'\r\nimport ListComments from './ListComments';\r\nimport CreateComment from './CreateComment';\r\n\r\nclass Comments extends Component {\r\n    state = {\r\n        query: '',\r\n        comments: [\"Comment0\", \"Comment1\", \"Comment2\"]\r\n    }\r\n\r\n    removeComment = (comment) => {\r\n        this.setState(state => ({\r\n            comments: state.comments.filter(c => c !== comment)\r\n        }))\r\n    }\r\n\r\n    updateQuery = (query) => {\r\n        this.setState({ query: query.trim() })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.query.length) {\r\n            const commentsCopy = [].concat(this.state.comments);\r\n            commentsCopy.push(this.state.query);\r\n            this.setState({ comments: commentsCopy });\r\n            this.setState({ query: '' });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { comments, query } = this.state\r\n\r\n        return (\r\n            <section>\r\n                <h2 className=\"title title-comments\">Comments</h2>\r\n                <ListComments comments={comments} onDeleteComment={this.removeComment} />\r\n                <CreateComment query={query} updateQuery={this.updateQuery} handleSubmit={this.handleSubmit} />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Comments","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Post from './Post'\r\nimport About from './About'\r\nimport Comments from './Comments'\r\n\r\nfunction FullPostPage(props){\r\n    return (\r\n        <div>\r\n            <Link className=\"close-post\" to=\"/\">Close</Link>\r\n            <div className=\"flex-container\">\r\n                <Post postId={props.post.id} postTitle={props.post.title} postBody={props.post.body} />\r\n                <About />\r\n            </div>\r\n            <Comments />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FullPostPage","import React, { Component } from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport Home from './Home'\r\nimport FullPostPage from './FullPostPage'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    posts: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ posts: data }))\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.state;\r\n\r\n    return (\r\n      <div className='App'>\r\n        <Route path=\"/post/:id\" render={({ match }) => {\r\n          const postsId = match.params.id - 1;\r\n\r\n          return <FullPostPage\r\n            post={posts[postsId]}\r\n          />\r\n        }} />\r\n        <Route exact path=\"/:page?\" render={({ match }) => {\r\n          let postsToRender;\r\n\r\n          if (match.params.page === undefined) {\r\n            let postsCopy = [].concat(posts);\r\n            postsToRender = postsCopy.slice(0, 10);\r\n          } else {\r\n            let postsToSkip = match.params.page * 10;\r\n            let postsCopy = [].concat(posts);\r\n            postsToRender = postsCopy.slice(0 + postsToSkip, 10 + postsToSkip);\r\n          }\r\n\r\n          return <Home\r\n            posts={postsToRender}\r\n          />\r\n        }} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter\r\n        basename='/Blog'\r\n    >\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}